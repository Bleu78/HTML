FUNCTION linear_search(tab : ARRAY_OF INTEGER, val :INTEGER)
BOOLEAN
VAR
i: INTEGER;
BEGIN
   FOR i FROM 0 TO tab.length STEP 1 DO //O(n)
    IF (tab[i] = val) THEN //O(1)
        RETURN  TRUE //O(1)
        //BREAK;
        END_IF
        END_FOR
        RETURN FALSE 
    END



//x = 3             We are assuming X is carrying 3 as it's value
0 1 2 3 4 5 6 7 8 9 //Indexing
1 2 3 4 5 6 7 8 9 10 //length = 10; 10/2 = 5            This is the current length of the array carrying 10 as it's total length but in order to get the mid of this array the total has to be divided by 2
7 8 9 10 //length = 4; 4/2 = 2          This is the current length of the array carrying 4 as it's total length but in order to get the mid of this array the total has to be divided by 2
FUNCTION binary_search(arr : ARRAY_OF INTEGER, x: INTEGER) : INTEGER
VAR
    left, right, mid : INTEGER;
BEGIN
    left := 0;      // This is the variable name 'left' starting at index 0 
    right := arr.length-1;      // // This is the variable name 'right' with the value of the total lenght of the array -1 
    
    //X = 3          We are still assuming X has 3 as it's value
    WHILE (left < right) DO             // This while loop has to show the result of the ('left' being lesser than 'right')
        mid := left + (right - left)/2; // MidIndex = 4 := Value 5          To find the mid 'left' which is 'index 0'  plus (right which is 'index 9' - 'left' which is 'index 0') but the total has to be divided by 2 
                                        // MidIndex = 1 := Value 2
        // check if x is present in the mid
        IF (arr[mid] = x) THEN //is 5 == 3: False //2 == 3 False //3 == 3           If the (array[mid index 4 with value of 5] = X with 3 as it's value) is false THEN 
            RETURN mid;   // RETURN mid which is (4) as the result of the mid.
        END_IF

        // if x is lesser, ignore the right half
        IF (x < arr[mid]) THEN //is 3 < 5: True // is 3 < 2 False                   If the (X with 3 as it's value < array[mid index 4 with value of 5]) is True THEN
            right := mid-1; //Right = 4 - 1 = 3; Value 4                    RETURN  right which is (3) as the result
            // if x is greater, ignore the left half
            left := mid+1; //Left = 4 + 1 = 5; Value 6 // Left 1 + 1 = 2
        END_IF
    END_WHILE
    
    // if we reached here then the element is not present
    RETURN -1 ;
END
